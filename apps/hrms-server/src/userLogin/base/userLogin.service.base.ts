/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UserLogin as PrismaUserLogin,
  UserMaster as PrismaUserMaster,
} from "@prisma/client";

export class UserLoginServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserLoginCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userLogin.count(args);
  }

  async userLogins(
    args: Prisma.UserLoginFindManyArgs
  ): Promise<PrismaUserLogin[]> {
    return this.prisma.userLogin.findMany(args);
  }
  async userLogin(
    args: Prisma.UserLoginFindUniqueArgs
  ): Promise<PrismaUserLogin | null> {
    return this.prisma.userLogin.findUnique(args);
  }
  async createUserLogin(
    args: Prisma.UserLoginCreateArgs
  ): Promise<PrismaUserLogin> {
    return this.prisma.userLogin.create(args);
  }
  async updateUserLogin(
    args: Prisma.UserLoginUpdateArgs
  ): Promise<PrismaUserLogin> {
    return this.prisma.userLogin.update(args);
  }
  async deleteUserLogin(
    args: Prisma.UserLoginDeleteArgs
  ): Promise<PrismaUserLogin> {
    return this.prisma.userLogin.delete(args);
  }

  async getUserMaster(parentId: string): Promise<PrismaUserMaster | null> {
    return this.prisma.userLogin
      .findUnique({
        where: { id: parentId },
      })
      .userMaster();
  }
}
