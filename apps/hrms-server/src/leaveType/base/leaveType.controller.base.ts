/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LeaveTypeService } from "../leaveType.service";
import { LeaveTypeCreateInput } from "./LeaveTypeCreateInput";
import { LeaveType } from "./LeaveType";
import { LeaveTypeFindManyArgs } from "./LeaveTypeFindManyArgs";
import { LeaveTypeWhereUniqueInput } from "./LeaveTypeWhereUniqueInput";
import { LeaveTypeUpdateInput } from "./LeaveTypeUpdateInput";
import { LeaveApplicationFindManyArgs } from "../../leaveApplication/base/LeaveApplicationFindManyArgs";
import { LeaveApplication } from "../../leaveApplication/base/LeaveApplication";
import { LeaveApplicationWhereUniqueInput } from "../../leaveApplication/base/LeaveApplicationWhereUniqueInput";

export class LeaveTypeControllerBase {
  constructor(protected readonly service: LeaveTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LeaveType })
  async createLeaveType(
    @common.Body() data: LeaveTypeCreateInput
  ): Promise<LeaveType> {
    return await this.service.createLeaveType({
      data: data,
      select: {
        active: true,
        createdAt: true,
        id: true,
        leaveDescription: true,
        typeField: true,
        typeName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LeaveType] })
  @ApiNestedQuery(LeaveTypeFindManyArgs)
  async leaveTypes(@common.Req() request: Request): Promise<LeaveType[]> {
    const args = plainToClass(LeaveTypeFindManyArgs, request.query);
    return this.service.leaveTypes({
      ...args,
      select: {
        active: true,
        createdAt: true,
        id: true,
        leaveDescription: true,
        typeField: true,
        typeName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LeaveType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async leaveType(
    @common.Param() params: LeaveTypeWhereUniqueInput
  ): Promise<LeaveType | null> {
    const result = await this.service.leaveType({
      where: params,
      select: {
        active: true,
        createdAt: true,
        id: true,
        leaveDescription: true,
        typeField: true,
        typeName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LeaveType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLeaveType(
    @common.Param() params: LeaveTypeWhereUniqueInput,
    @common.Body() data: LeaveTypeUpdateInput
  ): Promise<LeaveType | null> {
    try {
      return await this.service.updateLeaveType({
        where: params,
        data: data,
        select: {
          active: true,
          createdAt: true,
          id: true,
          leaveDescription: true,
          typeField: true,
          typeName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LeaveType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLeaveType(
    @common.Param() params: LeaveTypeWhereUniqueInput
  ): Promise<LeaveType | null> {
    try {
      return await this.service.deleteLeaveType({
        where: params,
        select: {
          active: true,
          createdAt: true,
          id: true,
          leaveDescription: true,
          typeField: true,
          typeName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/leaveApplications")
  @ApiNestedQuery(LeaveApplicationFindManyArgs)
  async findLeaveApplications(
    @common.Req() request: Request,
    @common.Param() params: LeaveTypeWhereUniqueInput
  ): Promise<LeaveApplication[]> {
    const query = plainToClass(LeaveApplicationFindManyArgs, request.query);
    const results = await this.service.findLeaveApplications(params.id, {
      ...query,
      select: {
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        endDate: true,
        id: true,
        justification: true,

        leaveType: {
          select: {
            id: true,
          },
        },

        managerComment: true,
        startDate: true,
        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/leaveApplications")
  async connectLeaveApplications(
    @common.Param() params: LeaveTypeWhereUniqueInput,
    @common.Body() body: LeaveApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leaveApplications: {
        connect: body,
      },
    };
    await this.service.updateLeaveType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/leaveApplications")
  async updateLeaveApplications(
    @common.Param() params: LeaveTypeWhereUniqueInput,
    @common.Body() body: LeaveApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leaveApplications: {
        set: body,
      },
    };
    await this.service.updateLeaveType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/leaveApplications")
  async disconnectLeaveApplications(
    @common.Param() params: LeaveTypeWhereUniqueInput,
    @common.Body() body: LeaveApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leaveApplications: {
        disconnect: body,
      },
    };
    await this.service.updateLeaveType({
      where: params,
      data,
      select: { id: true },
    });
  }
}
