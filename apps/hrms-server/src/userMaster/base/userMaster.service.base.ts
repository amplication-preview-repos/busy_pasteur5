/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UserMaster as PrismaUserMaster,
  UserLogin as PrismaUserLogin,
} from "@prisma/client";

export class UserMasterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserMasterCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userMaster.count(args);
  }

  async userMasters(
    args: Prisma.UserMasterFindManyArgs
  ): Promise<PrismaUserMaster[]> {
    return this.prisma.userMaster.findMany(args);
  }
  async userMaster(
    args: Prisma.UserMasterFindUniqueArgs
  ): Promise<PrismaUserMaster | null> {
    return this.prisma.userMaster.findUnique(args);
  }
  async createUserMaster(
    args: Prisma.UserMasterCreateArgs
  ): Promise<PrismaUserMaster> {
    return this.prisma.userMaster.create(args);
  }
  async updateUserMaster(
    args: Prisma.UserMasterUpdateArgs
  ): Promise<PrismaUserMaster> {
    return this.prisma.userMaster.update(args);
  }
  async deleteUserMaster(
    args: Prisma.UserMasterDeleteArgs
  ): Promise<PrismaUserMaster> {
    return this.prisma.userMaster.delete(args);
  }

  async findUserLogins(
    parentId: string,
    args: Prisma.UserLoginFindManyArgs
  ): Promise<PrismaUserLogin[]> {
    return this.prisma.userMaster
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userLogins(args);
  }
}
