/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserMaster } from "./UserMaster";
import { UserMasterCountArgs } from "./UserMasterCountArgs";
import { UserMasterFindManyArgs } from "./UserMasterFindManyArgs";
import { UserMasterFindUniqueArgs } from "./UserMasterFindUniqueArgs";
import { CreateUserMasterArgs } from "./CreateUserMasterArgs";
import { UpdateUserMasterArgs } from "./UpdateUserMasterArgs";
import { DeleteUserMasterArgs } from "./DeleteUserMasterArgs";
import { UserLoginFindManyArgs } from "../../userLogin/base/UserLoginFindManyArgs";
import { UserLogin } from "../../userLogin/base/UserLogin";
import { UserMasterService } from "../userMaster.service";
@graphql.Resolver(() => UserMaster)
export class UserMasterResolverBase {
  constructor(protected readonly service: UserMasterService) {}

  async _userMastersMeta(
    @graphql.Args() args: UserMasterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserMaster])
  async userMasters(
    @graphql.Args() args: UserMasterFindManyArgs
  ): Promise<UserMaster[]> {
    return this.service.userMasters(args);
  }

  @graphql.Query(() => UserMaster, { nullable: true })
  async userMaster(
    @graphql.Args() args: UserMasterFindUniqueArgs
  ): Promise<UserMaster | null> {
    const result = await this.service.userMaster(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserMaster)
  async createUserMaster(
    @graphql.Args() args: CreateUserMasterArgs
  ): Promise<UserMaster> {
    return await this.service.createUserMaster({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UserMaster)
  async updateUserMaster(
    @graphql.Args() args: UpdateUserMasterArgs
  ): Promise<UserMaster | null> {
    try {
      return await this.service.updateUserMaster({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserMaster)
  async deleteUserMaster(
    @graphql.Args() args: DeleteUserMasterArgs
  ): Promise<UserMaster | null> {
    try {
      return await this.service.deleteUserMaster(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [UserLogin], { name: "userLogins" })
  async findUserLogins(
    @graphql.Parent() parent: UserMaster,
    @graphql.Args() args: UserLoginFindManyArgs
  ): Promise<UserLogin[]> {
    const results = await this.service.findUserLogins(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
