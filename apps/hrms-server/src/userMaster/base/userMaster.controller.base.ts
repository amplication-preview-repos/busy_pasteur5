/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserMasterService } from "../userMaster.service";
import { UserMasterCreateInput } from "./UserMasterCreateInput";
import { UserMaster } from "./UserMaster";
import { UserMasterFindManyArgs } from "./UserMasterFindManyArgs";
import { UserMasterWhereUniqueInput } from "./UserMasterWhereUniqueInput";
import { UserMasterUpdateInput } from "./UserMasterUpdateInput";
import { UserLoginFindManyArgs } from "../../userLogin/base/UserLoginFindManyArgs";
import { UserLogin } from "../../userLogin/base/UserLogin";
import { UserLoginWhereUniqueInput } from "../../userLogin/base/UserLoginWhereUniqueInput";

export class UserMasterControllerBase {
  constructor(protected readonly service: UserMasterService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserMaster })
  async createUserMaster(
    @common.Body() data: UserMasterCreateInput
  ): Promise<UserMaster> {
    return await this.service.createUserMaster({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
        userType: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserMaster] })
  @ApiNestedQuery(UserMasterFindManyArgs)
  async userMasters(@common.Req() request: Request): Promise<UserMaster[]> {
    const args = plainToClass(UserMasterFindManyArgs, request.query);
    return this.service.userMasters({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
        userType: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserMaster })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userMaster(
    @common.Param() params: UserMasterWhereUniqueInput
  ): Promise<UserMaster | null> {
    const result = await this.service.userMaster({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
        userType: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserMaster })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserMaster(
    @common.Param() params: UserMasterWhereUniqueInput,
    @common.Body() data: UserMasterUpdateInput
  ): Promise<UserMaster | null> {
    try {
      return await this.service.updateUserMaster({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
          userType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserMaster })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserMaster(
    @common.Param() params: UserMasterWhereUniqueInput
  ): Promise<UserMaster | null> {
    try {
      return await this.service.deleteUserMaster({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
          userType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/userLogins")
  @ApiNestedQuery(UserLoginFindManyArgs)
  async findUserLogins(
    @common.Req() request: Request,
    @common.Param() params: UserMasterWhereUniqueInput
  ): Promise<UserLogin[]> {
    const query = plainToClass(UserLoginFindManyArgs, request.query);
    const results = await this.service.findUserLogins(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        password: true,
        updatedAt: true,
        userId: true,

        userMaster: {
          select: {
            id: true,
          },
        },

        username: true,
        userType: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userLogins")
  async connectUserLogins(
    @common.Param() params: UserMasterWhereUniqueInput,
    @common.Body() body: UserLoginWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userLogins: {
        connect: body,
      },
    };
    await this.service.updateUserMaster({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userLogins")
  async updateUserLogins(
    @common.Param() params: UserMasterWhereUniqueInput,
    @common.Body() body: UserLoginWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userLogins: {
        set: body,
      },
    };
    await this.service.updateUserMaster({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userLogins")
  async disconnectUserLogins(
    @common.Param() params: UserMasterWhereUniqueInput,
    @common.Body() body: UserLoginWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userLogins: {
        disconnect: body,
      },
    };
    await this.service.updateUserMaster({
      where: params,
      data,
      select: { id: true },
    });
  }
}
