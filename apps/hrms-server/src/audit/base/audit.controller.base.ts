/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AuditService } from "../audit.service";
import { AuditCreateInput } from "./AuditCreateInput";
import { Audit } from "./Audit";
import { AuditFindManyArgs } from "./AuditFindManyArgs";
import { AuditWhereUniqueInput } from "./AuditWhereUniqueInput";
import { AuditUpdateInput } from "./AuditUpdateInput";

export class AuditControllerBase {
  constructor(protected readonly service: AuditService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Audit })
  async createAudit(@common.Body() data: AuditCreateInput): Promise<Audit> {
    return await this.service.createAudit({
      data: data,
      select: {
        createdAt: true,
        id: true,
        newValue: true,
        oldValue: true,
        updatedAt: true,
        updatedBy: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Audit] })
  @ApiNestedQuery(AuditFindManyArgs)
  async audits(@common.Req() request: Request): Promise<Audit[]> {
    const args = plainToClass(AuditFindManyArgs, request.query);
    return this.service.audits({
      ...args,
      select: {
        createdAt: true,
        id: true,
        newValue: true,
        oldValue: true,
        updatedAt: true,
        updatedBy: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Audit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async audit(
    @common.Param() params: AuditWhereUniqueInput
  ): Promise<Audit | null> {
    const result = await this.service.audit({
      where: params,
      select: {
        createdAt: true,
        id: true,
        newValue: true,
        oldValue: true,
        updatedAt: true,
        updatedBy: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Audit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAudit(
    @common.Param() params: AuditWhereUniqueInput,
    @common.Body() data: AuditUpdateInput
  ): Promise<Audit | null> {
    try {
      return await this.service.updateAudit({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          newValue: true,
          oldValue: true,
          updatedAt: true,
          updatedBy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Audit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAudit(
    @common.Param() params: AuditWhereUniqueInput
  ): Promise<Audit | null> {
    try {
      return await this.service.deleteAudit({
        where: params,
        select: {
          createdAt: true,
          id: true,
          newValue: true,
          oldValue: true,
          updatedAt: true,
          updatedBy: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
