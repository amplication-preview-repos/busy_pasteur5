/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  LeaveApplication as PrismaLeaveApplication,
  Employee as PrismaEmployee,
  LeaveType as PrismaLeaveType,
} from "@prisma/client";

import { LeaveApplicationWhereInput } from "./LeaveApplicationWhereInput";
import { LeaveApplication } from "./LeaveApplication";

export class LeaveApplicationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LeaveApplicationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.leaveApplication.count(args);
  }

  async leaveApplications(
    args: Prisma.LeaveApplicationFindManyArgs
  ): Promise<PrismaLeaveApplication[]> {
    return this.prisma.leaveApplication.findMany(args);
  }
  async leaveApplication(
    args: Prisma.LeaveApplicationFindUniqueArgs
  ): Promise<PrismaLeaveApplication | null> {
    return this.prisma.leaveApplication.findUnique(args);
  }
  async createLeaveApplication(
    args: Prisma.LeaveApplicationCreateArgs
  ): Promise<PrismaLeaveApplication> {
    return this.prisma.leaveApplication.create(args);
  }
  async updateLeaveApplication(
    args: Prisma.LeaveApplicationUpdateArgs
  ): Promise<PrismaLeaveApplication> {
    return this.prisma.leaveApplication.update(args);
  }
  async deleteLeaveApplication(
    args: Prisma.LeaveApplicationDeleteArgs
  ): Promise<PrismaLeaveApplication> {
    return this.prisma.leaveApplication.delete(args);
  }

  async getEmployee(parentId: string): Promise<PrismaEmployee | null> {
    return this.prisma.leaveApplication
      .findUnique({
        where: { id: parentId },
      })
      .employee();
  }

  async getLeaveType(parentId: string): Promise<PrismaLeaveType | null> {
    return this.prisma.leaveApplication
      .findUnique({
        where: { id: parentId },
      })
      .leaveType();
  }
  async FetchMyAttendance(
    args: LeaveApplicationWhereInput
  ): Promise<LeaveApplication[]> {
    throw new Error("Not implemented");
  }
}
